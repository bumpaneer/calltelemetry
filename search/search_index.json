{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CallTelemetry Documentation Guide Choose a topic to the left","title":"CallTelemetry Documentation Guide"},{"location":"#calltelemetry-documentation-guide","text":"Choose a topic to the left","title":"CallTelemetry Documentation Guide"},{"location":"architecture/","text":"CallTelemetry uses realtime feeds to create actionable events from Cisco Callmanager. Cisco Integration: CURRI API subscribes to realtime call event data from Cisco CUCM. CDR is processed to obtain additional telemetry, including MCID flags. Both of these integrations are \"push\" integrations to CallTelemetry. No CUCM credentials are required for this integration, minimizing your security exposure. Architecture Diagram","title":"Architecture"},{"location":"architecture/#architecture-diagram","text":"","title":"Architecture Diagram"},{"location":"changelog/","text":"Changelog January Updates -1/2021 HA Clustering available - Load Balancing and full failover - here OVA Builder scripting: OVAs are automatically built fresh from CentOS 8.3 every release. Uploaded new Docker-Compose OVA Uploaded Cluster starter OVA Sizing Guide here Load Testing instructions here 0.4.0 -12/2/2020 New App: Send Message to Calling Number - for Post Call Surveys New App: Webhooks (migrated from existing Webhook feature) New MCID Page - CDR Status, and MCIDs New Bulk Rule Import/Export - Import/Export multiple rules in bulk New IOS Rule Import / Export - direct from IOS translation rules New CDR Parser: Rebuilt CDR parser for stability. New Organization Feature: - Add multiple team members to an Organization to manage policies. CDR MCID: Prior to 0.4.0 - CDR MCID were added to the \"Default Policy\" only. Now they are stored in a Organization MCIDs Table. Added ability for policies to block on MCIDs, or ignore them. Daily SQL backups on the OVA Breaking Changes: WebHooks are now an App. Kubernetes manifest is not ready for 0.4.0 yet - coming soon. 0.3.9 - 11/5/2020 New: Apps - Customizable App structure. New: App: Native Webex Teams Alert New: App: Native SMTP Alert New: App: Native SMS Alert New: Added Manual CDR Upload to CDR Reports page New: Added Parser support for CUCM 12.5 CDR. Change: Beta Build Expires 1/31/2021 Breaking Changes: \"Alerts\" are now within Apps. This allows full customization of the Alert in any format - Teams, SMS, SMTP, or whatever comes next. Removed Alerts Tab in Rule Edit. Removed SMTP Settings Page - SMTP Settings are now part of Apps. Previously defined SMTP/Email Alerts will still work this release as transition release - but will not show up in the UI. This feature will be officially removed in 0.4.0. 0.3.8 - 9/24/2020 New: *Webhooks / Apps * - Add multiple HTTP triggers to any realtime call event! Apps are coming and will be even smarter. New: OVA Pre-Built Appliance Release UI Updates - Many UI enhancements, more to come. New: Documentation Site - here New: Expire MCID submissions - Configure a day limit for user submissions to automatically expire/delete. New: Policies UI consolidated - history, search, live logs, all from the Policies View. New: Improved Settings Page with Tabs Fixed: SMTP - had some issues found in testing. Fixed: Hit counters. This version is still unlimited and this release expires on 12/31/2020 Fixed: Standardized time entries to UTC. Removed Discord Community Link. Added Webex Teams - you can now join a dedicated room in Cisco Webex Teams - see footer. 0.3.7 - 8/5/2020 Added Live Logging - Streaming logs of realtime call processing for CURRI_API. Now you can see calls and policy decisions made - in Realtime. Updated CDR Uploads Page - Now you can upload multiple CDR files via drag and drop. CDR will be processed to the Log View, where every field is decoded, and Malicious caller tags are written into your default policy. Added Called Party Translation - reroute callers to any new number using Policies. Added *Calling Party / Calling Name * - change the caller ID of any call in realtime. Added Event Bus - This is currently more an internal feature, and optimizes realtime responses and lays work for third more exciting integrations. 0.3.6 - 7/20/2020 Updated, tested and Simplified documentation. Removed Linux option compiled per Distro. If you need linux only and no docker, let me know. Add Email Alerts + SMTP Support. You can now receive an Instant Email Alerts on any Route Point, Translation, or Phone Number - including Emergency Alerts like 911 Patterns. CDR not required, and more than one email address can be added. 0.3.5 - 3/20/2020 Add Greeting Injection support for Permit and Block Actions. You can now inject greetings without blocking calls - for example to inject a Coronavirus greeting to every call into your cluster. You can use this by typing the exact name of the greeting in Callmanager Announcements into the rule, shown below. Add Permit action - you can now have policies that do not block. Add default action - calling and called numbers can be blank to match all calls in a policy. 0.3.4 - 3/15/2020 \"Call Actions/Triggers\" are coming soon, but every feature includes the UI complexity. I focused on this release to be simpler to use, easier to deploy, and better tested. Web Pages & How-to Videos: * Video training on deployment and onboarding Elixir/Phoenix: * Updates to latest versions, including minor refactoring to comply with library changes. UI: * Intense effort to simplify, and build easier to understand User Interface. * Quick Add of numbers for manual entry {:height=\"50%\" width=\"50%\"} * Policy Keepalive - shows multiple Health status for each Policy's Keepalive to Callmanager. It also detects failure, and shows the last time seen. {:height=\"30%\" width=\"30%\"} Call Logs - View Live CURRI API Calls. Quick Block / Permit Toggle Policy result history tracking {:height=\"50%\" width=\"50%\"} Moved version to Navbar, simplified Navbar CDR UI cleaned up Deployment: * Improved Documentation on Docker Install * Added Kubernetes Deployment Model Support: * Intensely tested every part of the application. * Removed Slack Channel (invite process is messy) * Added Discord Channel - easy to join, no invite process. * Removed Twitter Handle - I'm not using it yet. 0.3.3 - 2/27/2020 Enhancements * Called party rules. Policies can now be Calling, Called, or Both party matches now. Rules have a calling and called field. Policy type determines what is used. * UX Enhancements * Time limits removed, no expiration date. 0.3.2 - 12/10/2019 New Features * SIP Service - Point a route pattern at a Callmanager SIP Trunk towards the IP of the CallTelemetry host (on-premise), and you can now transfer calls to add them to the call block list. * UX Enhancements Bug Fixes * Call Pagination issues 0.3.1 - 12/4/2019 New Features Introducing the Industry First CDR to CURRI Integration, allowing automatic incoming call blocking! * SFTP Server - To accept CDR uploads from Callmanager. Tightly integrated so that the login is exactly the same as the Web Interface of your server. * CDR Parser - Full support of all CDR(Call Detail Record) fields from Cisco UCM viewable in the web UI. We support 11.x and 12.x. If you have errors send an example of your failed CDR file to me, I can easily add more parsers. * MCID Automatic Blocking - Detection of Malicious Caller-ID (MCID) flag and automatically blacklisting the caller without any interaction beyond the user pressing the MCID softkey. 0.2.9 - 11/1/2019 First Public Release for On-Prem. 0.2.9 expires Feb 1 2020. New Features * Cisco Incoming Call Blocking - You can apply a call block policy to any Route Pattern, Translation, or Directory Number. You can spread that to multiple CUCM Clusters to have complete call blocking globally. * Call Logging - All calls from devices using the policy are available in the CURRI Call log. 0.2.0 - 9/1/2019 Cloud only. Proof of concept available for public demo.","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#january-updates-12021","text":"HA Clustering available - Load Balancing and full failover - here OVA Builder scripting: OVAs are automatically built fresh from CentOS 8.3 every release. Uploaded new Docker-Compose OVA Uploaded Cluster starter OVA Sizing Guide here Load Testing instructions here","title":"January Updates -1/2021"},{"location":"changelog/#040-1222020","text":"New App: Send Message to Calling Number - for Post Call Surveys New App: Webhooks (migrated from existing Webhook feature) New MCID Page - CDR Status, and MCIDs New Bulk Rule Import/Export - Import/Export multiple rules in bulk New IOS Rule Import / Export - direct from IOS translation rules New CDR Parser: Rebuilt CDR parser for stability. New Organization Feature: - Add multiple team members to an Organization to manage policies. CDR MCID: Prior to 0.4.0 - CDR MCID were added to the \"Default Policy\" only. Now they are stored in a Organization MCIDs Table. Added ability for policies to block on MCIDs, or ignore them. Daily SQL backups on the OVA Breaking Changes: WebHooks are now an App. Kubernetes manifest is not ready for 0.4.0 yet - coming soon.","title":"0.4.0 -12/2/2020"},{"location":"changelog/#039-1152020","text":"New: Apps - Customizable App structure. New: App: Native Webex Teams Alert New: App: Native SMTP Alert New: App: Native SMS Alert New: Added Manual CDR Upload to CDR Reports page New: Added Parser support for CUCM 12.5 CDR. Change: Beta Build Expires 1/31/2021 Breaking Changes: \"Alerts\" are now within Apps. This allows full customization of the Alert in any format - Teams, SMS, SMTP, or whatever comes next. Removed Alerts Tab in Rule Edit. Removed SMTP Settings Page - SMTP Settings are now part of Apps. Previously defined SMTP/Email Alerts will still work this release as transition release - but will not show up in the UI. This feature will be officially removed in 0.4.0.","title":"0.3.9 - 11/5/2020"},{"location":"changelog/#038-9242020","text":"New: *Webhooks / Apps * - Add multiple HTTP triggers to any realtime call event! Apps are coming and will be even smarter. New: OVA Pre-Built Appliance Release UI Updates - Many UI enhancements, more to come. New: Documentation Site - here New: Expire MCID submissions - Configure a day limit for user submissions to automatically expire/delete. New: Policies UI consolidated - history, search, live logs, all from the Policies View. New: Improved Settings Page with Tabs Fixed: SMTP - had some issues found in testing. Fixed: Hit counters. This version is still unlimited and this release expires on 12/31/2020 Fixed: Standardized time entries to UTC. Removed Discord Community Link. Added Webex Teams - you can now join a dedicated room in Cisco Webex Teams - see footer.","title":"0.3.8 - 9/24/2020"},{"location":"changelog/#037-852020","text":"Added Live Logging - Streaming logs of realtime call processing for CURRI_API. Now you can see calls and policy decisions made - in Realtime. Updated CDR Uploads Page - Now you can upload multiple CDR files via drag and drop. CDR will be processed to the Log View, where every field is decoded, and Malicious caller tags are written into your default policy. Added Called Party Translation - reroute callers to any new number using Policies. Added *Calling Party / Calling Name * - change the caller ID of any call in realtime. Added Event Bus - This is currently more an internal feature, and optimizes realtime responses and lays work for third more exciting integrations.","title":"0.3.7 - 8/5/2020"},{"location":"changelog/#036-7202020","text":"Updated, tested and Simplified documentation. Removed Linux option compiled per Distro. If you need linux only and no docker, let me know. Add Email Alerts + SMTP Support. You can now receive an Instant Email Alerts on any Route Point, Translation, or Phone Number - including Emergency Alerts like 911 Patterns. CDR not required, and more than one email address can be added.","title":"0.3.6 - 7/20/2020"},{"location":"changelog/#035-3202020","text":"Add Greeting Injection support for Permit and Block Actions. You can now inject greetings without blocking calls - for example to inject a Coronavirus greeting to every call into your cluster. You can use this by typing the exact name of the greeting in Callmanager Announcements into the rule, shown below. Add Permit action - you can now have policies that do not block. Add default action - calling and called numbers can be blank to match all calls in a policy.","title":"0.3.5 - 3/20/2020"},{"location":"changelog/#034-3152020","text":"\"Call Actions/Triggers\" are coming soon, but every feature includes the UI complexity. I focused on this release to be simpler to use, easier to deploy, and better tested. Web Pages & How-to Videos: * Video training on deployment and onboarding Elixir/Phoenix: * Updates to latest versions, including minor refactoring to comply with library changes. UI: * Intense effort to simplify, and build easier to understand User Interface. * Quick Add of numbers for manual entry {:height=\"50%\" width=\"50%\"} * Policy Keepalive - shows multiple Health status for each Policy's Keepalive to Callmanager. It also detects failure, and shows the last time seen. {:height=\"30%\" width=\"30%\"} Call Logs - View Live CURRI API Calls. Quick Block / Permit Toggle Policy result history tracking {:height=\"50%\" width=\"50%\"} Moved version to Navbar, simplified Navbar CDR UI cleaned up Deployment: * Improved Documentation on Docker Install * Added Kubernetes Deployment Model Support: * Intensely tested every part of the application. * Removed Slack Channel (invite process is messy) * Added Discord Channel - easy to join, no invite process. * Removed Twitter Handle - I'm not using it yet.","title":"0.3.4 - 3/15/2020"},{"location":"changelog/#033-2272020","text":"Enhancements * Called party rules. Policies can now be Calling, Called, or Both party matches now. Rules have a calling and called field. Policy type determines what is used. * UX Enhancements * Time limits removed, no expiration date.","title":"0.3.3 - 2/27/2020"},{"location":"changelog/#032-12102019","text":"New Features * SIP Service - Point a route pattern at a Callmanager SIP Trunk towards the IP of the CallTelemetry host (on-premise), and you can now transfer calls to add them to the call block list. * UX Enhancements Bug Fixes * Call Pagination issues","title":"0.3.2 - 12/10/2019"},{"location":"changelog/#031-1242019","text":"New Features Introducing the Industry First CDR to CURRI Integration, allowing automatic incoming call blocking! * SFTP Server - To accept CDR uploads from Callmanager. Tightly integrated so that the login is exactly the same as the Web Interface of your server. * CDR Parser - Full support of all CDR(Call Detail Record) fields from Cisco UCM viewable in the web UI. We support 11.x and 12.x. If you have errors send an example of your failed CDR file to me, I can easily add more parsers. * MCID Automatic Blocking - Detection of Malicious Caller-ID (MCID) flag and automatically blacklisting the caller without any interaction beyond the user pressing the MCID softkey.","title":"0.3.1 - 12/4/2019"},{"location":"changelog/#029-1112019","text":"First Public Release for On-Prem. 0.2.9 expires Feb 1 2020. New Features * Cisco Incoming Call Blocking - You can apply a call block policy to any Route Pattern, Translation, or Directory Number. You can spread that to multiple CUCM Clusters to have complete call blocking globally. * Call Logging - All calls from devices using the policy are available in the CURRI Call log.","title":"0.2.9 - 11/1/2019"},{"location":"changelog/#020-912019","text":"Cloud only. Proof of concept available for public demo.","title":"0.2.0 - 9/1/2019"},{"location":"cloud/","text":"The Cloud Demo Environment is free and unlimited. CDR Processing is not offered on the Cloud Demo. CDR processing takes up a lot of bandwidth and CPU. Data will be reset on new releases! Do not use it for production use.","title":"Cloud Demo"},{"location":"licensing/","text":"Development builds are free, and intended for trial purposes only Production licensing and support is available - email jason@calltelemetry.com for details. Development Version Expirations 0.3.9 will expire 12-31-2020. 0.4.0 will expire 3-31-2021. 0.4.1 will expire 5-31-2021.","title":"Licensing"},{"location":"apps/smtp/","text":"App List Send a Message via Webex Teams Bot Posts a message into a Webex Teams Space. Requires a Bot Token - Obtain your Bot token in the Webex Teams Admin space. Send a Message via Twilio SMS Sends a message to a list of SMS numbers. Requires Twilio API keys and phone number. Send a Message via SMTP Sends a message to a list of email addresses via SMTP Requires SMTP credentials for your server. Send a Message via Twilio to Caller Sends a message back to the caller to engage in a new channel. For example - Post Call Surveying, or engaging with Agents via Chat during vs holding. Requires Twilio API keys and phone number","title":"App List"},{"location":"apps/smtp/#app-list","text":"","title":"App List"},{"location":"apps/smtp/#send-a-message-via-webex-teams-bot","text":"Posts a message into a Webex Teams Space. Requires a Bot Token - Obtain your Bot token in the Webex Teams Admin space.","title":"Send a Message via Webex Teams Bot"},{"location":"apps/smtp/#send-a-message-via-twilio-sms","text":"Sends a message to a list of SMS numbers. Requires Twilio API keys and phone number.","title":"Send a Message via Twilio SMS"},{"location":"apps/smtp/#send-a-message-via-smtp","text":"Sends a message to a list of email addresses via SMTP Requires SMTP credentials for your server.","title":"Send a Message via SMTP"},{"location":"apps/smtp/#send-a-message-via-twilio-to-caller","text":"Sends a message back to the caller to engage in a new channel. For example - Post Call Surveying, or engaging with Agents via Chat during vs holding. Requires Twilio API keys and phone number","title":"Send a Message via Twilio to Caller"},{"location":"apps/webhooks/","text":"App List Send a Message via Webex Teams Bot Posts a message into a Webex Teams Space. Requires a Bot Token - Obtain your Bot token in the Webex Teams Admin space. Send a Message via Twilio SMS Sends a message to a list of SMS numbers. Requires Twilio API keys and phone number. Send a Message via SMTP Sends a message to a list of email addresses via SMTP Requires SMTP credentials for your server. Send a Message via Twilio to Caller Sends a message back to the caller to engage in a new channel. For example - Post Call Surveying, or engaging with Agents via Chat during vs holding. Requires Twilio API keys and phone number","title":"Catalog"},{"location":"apps/webhooks/#app-list","text":"","title":"App List"},{"location":"apps/webhooks/#send-a-message-via-webex-teams-bot","text":"Posts a message into a Webex Teams Space. Requires a Bot Token - Obtain your Bot token in the Webex Teams Admin space.","title":"Send a Message via Webex Teams Bot"},{"location":"apps/webhooks/#send-a-message-via-twilio-sms","text":"Sends a message to a list of SMS numbers. Requires Twilio API keys and phone number.","title":"Send a Message via Twilio SMS"},{"location":"apps/webhooks/#send-a-message-via-smtp","text":"Sends a message to a list of email addresses via SMTP Requires SMTP credentials for your server.","title":"Send a Message via SMTP"},{"location":"apps/webhooks/#send-a-message-via-twilio-to-caller","text":"Sends a message back to the caller to engage in a new channel. For example - Post Call Surveying, or engaging with Agents via Chat during vs holding. Requires Twilio API keys and phone number","title":"Send a Message via Twilio to Caller"},{"location":"deployment/choices/","text":"Single Node Easiset to demo in a lab, boots, DHCP, and sign in. You can go production with it too, it will automatically start up all service on reboot. Make sure to size it correctly to the call volume you expect, by default it only requests 2 vCPU - about 100 calls/second. An example PostgreSQL backup script is included in the folder. OVA Appliance Multi Node HA If you need to scale to multiple vCPU VMs for load balancing, or capacity, or failover - choose this. You will get 2 Virtual IPs floating among 3+ nodes, with PostgreSQL replicas on each node. The CrunchyData PostgreSQL operator has a built in backup scheduler you can use for backups. Cluster - Kubernetes","title":"Platform Choices"},{"location":"deployment/choices/#single-node","text":"Easiset to demo in a lab, boots, DHCP, and sign in. You can go production with it too, it will automatically start up all service on reboot. Make sure to size it correctly to the call volume you expect, by default it only requests 2 vCPU - about 100 calls/second. An example PostgreSQL backup script is included in the folder. OVA Appliance","title":"Single Node"},{"location":"deployment/choices/#multi-node-ha","text":"If you need to scale to multiple vCPU VMs for load balancing, or capacity, or failover - choose this. You will get 2 Virtual IPs floating among 3+ nodes, with PostgreSQL replicas on each node. The CrunchyData PostgreSQL operator has a built in backup scheduler you can use for backups. Cluster - Kubernetes","title":"Multi Node HA"},{"location":"deployment/docker/","text":"Docker Recommend: Ubuntu 18.0.4 2 Minutes to both install Docker, and create an account! Once docker boots, visit http://localhost, Sign up with any login you like. Linux only: Change port 22 for CDR SFTP Since we run our own SFTP server, so we need to change Linux's SSH port from 22 to 2222 (or any other port than 22). echo \"Port 2222\" >> /etc/ssh/sshd_config systemctl restart sshd.service You will have to SSH to Linux on 2222 now, instead of 22. Grab the Docker Compose file and Launch the containers! sudo snap install docker sudo apt-get install docker-compose mkdir calltelemetry wget https://raw.githubusercontent.com/calltelemetry/calltelemetry/master/docker-compose.yml cd calltelemetry sudo docker-compose up","title":"Docker"},{"location":"deployment/docker/#docker","text":"Recommend: Ubuntu 18.0.4 2 Minutes to both install Docker, and create an account! Once docker boots, visit http://localhost, Sign up with any login you like. Linux only: Change port 22 for CDR SFTP Since we run our own SFTP server, so we need to change Linux's SSH port from 22 to 2222 (or any other port than 22). echo \"Port 2222\" >> /etc/ssh/sshd_config systemctl restart sshd.service You will have to SSH to Linux on 2222 now, instead of 22.","title":"Docker"},{"location":"deployment/docker/#grab-the-docker-compose-file-and-launch-the-containers","text":"sudo snap install docker sudo apt-get install docker-compose mkdir calltelemetry wget https://raw.githubusercontent.com/calltelemetry/calltelemetry/master/docker-compose.yml cd calltelemetry sudo docker-compose up","title":"Grab the Docker Compose file and Launch the containers!"},{"location":"deployment/k3s/","text":"K3S Cluster Guide Although it is a long page, the entire deployment is only about 30 minutes. Architecture IP Addressing Deploy 3 or more CallTelemetry Cluster OVAs Download CentOS 8.3 OVA File - 900MB The OVA includes a couple utilities - helm, kubectl, k9s, and saves you a little time \"building\" the OS. It's prebuilt from CentOS 8.3 with all updates applied. You can install this on ANY linux distro, but the support required to do so is beyond my time. I want to install CentOS myself - what's missing? enable snaps yum install -y epel-release yum install -y snapd yum install -y wget systemctl enable --now snapd.socket ln -s /var/lib/snapd/snap /snap snap wait system seed.loaded systemctl restart snapd.seeded.service install kubectl and helm snap install kubectl --classic snap install helm --classic The nodes boot up and display their DHCP Address on login screen. SSH to the nodes on port 22. Default password is calltelemetry/calltelemetry It's OK to Change the password - it's not used anywhere else. Change hostnames! If you do not set the hostname per node, you will not get very far without things failing. I recommend ct-node-1, ct-node-2, ct-node-3, etc, but this is your choice. sudo hostnamect ct-node-1 Repeat for other nodes 2 and 3. Static IP the NICs is recommended. in CentOS you can static the NICs like this sudo nmtui Install First K3s Master Node Time: about 2 minutes Copy and paste this via SSH on the first node. export INSTALL_K3S_CHANNEL=stable export K3S_KUBECONFIG_MODE=\"0644\" export K3S_TOKEN=\"calltelemetry\" curl -sfL https://get.k3s.io | sh -s server --cluster-init --no-deploy traefik --disable servicelb rm -rf .kube mkdir .kube sudo cat /etc/rancher/k3s/k3s.yaml > ~/.kube/config Install K3s Masters 2 and 3 Time: about 5 minutes Change the K3S_URL IP address to Master node 1's IP Address export K3S_URL=\"https://192.168.123.167:6443\" export INSTALL_K3S_CHANNEL=stable export K3S_TOKEN=\"calltelemetry\" export K3S_KUBECONFIG_MODE=\"0644\" curl -sfL https://get.k3s.io | sh -s server - --no-deploy traefik --disable servicelb rm -rf .kube mkdir .kube sudo cat /etc/rancher/k3s/k3s.yaml > ~/.kube/config sudo cat /var/lib/rancher/k3s/server/node-token Check the health of the nodes before continuing - all should say running. calltelemetry@hp-k3s-1:~$ kubectl get nodes NAME STATUS ROLES AGE VERSION ct-node-1 Ready control-plane,etcd,master 4m36s v1.20.0+k3s2 ct-node-2 Ready control-plane,etcd,master 40s v1.20.0+k3s2 ct-node-3 Ready control-plane,etcd,master 19s v1.20.0+k3s2 calltelemetry@hp-k3s-1:~$ Install MetalLB, Scale DNS Pods, and Traefik Proxy Time: about 5 minutes Copy and Paste this block kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=\"$(openssl rand -base64 128)\" kubectl scale deployment.v1.apps/coredns --replicas=3 -n kube-system helm repo add traefik https://helm.traefik.io/traefik helm repo update helm install traefik traefik/traefik --set service.annotations.\"metallb\\.universe\\.tf\\/address-pool\"=default kubectl create namespace pgo kubectl apply -f https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.5.1/installers/kubectl/postgres-operator.yml curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.5.1/installers/kubectl/client-setup.sh > client-setup.sh chmod +x client-setup.sh cat <<EOF >> ~/.bashrc export PGOUSER=\"${HOME?}/.pgo/pgo/pgouser\" export PGO_CA_CERT=\"${HOME?}/.pgo/pgo/client.crt\" export PGO_CLIENT_CERT=\"${HOME?}/.pgo/pgo/client.crt\" export PGO_CLIENT_KEY=\"${HOME?}/.pgo/pgo/client.key\" export PGO_APISERVER_URL='https://127.0.0.1:8443' export PGO_NAMESPACE=pgo EOF source ~/.bashrc In about 3-5 minutes, all pods in the cluster should be \"Running\" [calltelemetry@ct-node-1 ~]$ kubectl get pod -A NAMESPACE NAME READY STATUS RESTARTS AGE default traefik-99bfb8458-9wjnc 1/1 Running 0 2m37s kube-system coredns-854c77959c-6nf88 1/1 Running 0 2m59s kube-system coredns-854c77959c-cg9vg 1/1 Running 0 8m10s kube-system coredns-854c77959c-g9jbr 1/1 Running 0 2m59s kube-system local-path-provisioner-7c458769fb-hpk77 1/1 Running 0 8m10s kube-system metrics-server-86cbb8457f-lfswr 1/1 Running 0 8m10s metallb-system controller-65db86ddc6-fmnvv 1/1 Running 0 2m59s metallb-system speaker-j4xj5 1/1 Running 0 2m59s metallb-system speaker-k84ln 1/1 Running 0 2m59s metallb-system speaker-lrmj9 1/1 Running 0 2m59s pgo pgo-deploy-clz5l 0/1 Completed 0 2m36s pgo postgres-operator-7b94775688-dv6nm 4/4 Running 1 83s [calltelemetry@ct-node-1 ~]$ Wait for postgres-operator to be running before continue Deploy SQL HA with 2 Replicas Time: About 5 minutes Run SQL the Setup Script (Run this on Node 1) Leave this window open after running the port-forward. You will have 2 windows open to Node 1. ./client-setup.sh sudo mv .pgo/pgo/pgo /usr/local/bin kubectl port-forward -n pgo svc/postgres-operator 8443:8443 Open a SSH window to the same node in a NEW window You can change the SQL password here if you like. pgo create cluster -n pgo ctsql -d calltelemetry_prod --replica-count 2 --password-superuser=calltelemetry Check the status of the deployment by watching the pods deploy. kubectl get pods -n pgo NAME READY STATUS RESTARTS AGE ctsql-6895cd4bb-2f524 0/1 ContainerCreating 0 21s ctsql-backrest-shared-repo-7d4648f796-wxrqh 1/1 Running 0 32s pgo-deploy-fpcq2 0/1 Completed 0 3m27s postgres-operator-7b94775688-2sf4c 4/4 Running 1 2m14s You should see 3 ctsql instances complete. Let's confirm they are online kubectl get pods -n pgo NAME READY STATUS RESTARTS AGE backrest-backup-ctsql-gnbvl 0/1 Completed 0 57s ctsql-6895cd4bb-2f524 1/1 Running 0 118s ctsql-backrest-shared-repo-7d4648f796-wxrqh 1/1 Running 0 2m9s ctsql-iulc-75ccc767c7-wwd2k 0/1 Running 0 49s ctsql-stanza-create-tkltr 0/1 Completed 0 66s ctsql-yzgz-8689bb9998-c2mlf 0/1 Running 0 49s pgo-deploy-fpcq2 0/1 Completed 0 5m4s postgres-operator-7b94775688-2sf4c 4/4 Running 1 3m51s # Check your Cluster pgo test ctsql cluster : ctsql Services primary (10.43.222.74:5432): UP replica (10.43.246.172:5432): UP Instances primary (ctsql-6895cd4bb-2f524): UP replica (ctsql-iulc-75ccc767c7-wwd2k): UP replica (ctsql-yzgz-8689bb9998-c2mlf): UP Deploy CallTelemetry Time: About 2 minutes Copy and paste this into a text editor, edit it with your password if you changed it, and assign 2 static IPS for primary and secondary. Cluster IP start and end are not use for CallTelemetry, but helpful to be set. This step creates a ct_values.yaml file in the local folder. Edit it on the server or in notepad. Paste this directly into the shell. cat <<EOF > ct_values.yaml # ct_values.yaml db_password: calltelemetry primary_ip: 192.168.123.135 secondary_ip: 192.168.123.136 cluster_ip_start: 192.168.123.138 cluster_ip_end: 192.168.123.140 EOF helm repo add ct_charts https://storage.googleapis.com/ct_charts/ helm repo update helm install calltelemetry ct_charts/calltelemetry -f ct_values.yaml If you need to re-deploy new values, it is an upgrade instead - like this helm upgrade calltelemetry -f ct_values.yaml Check the deployment - you should see 3 CallTelemetry-web servers running. kubectl get pods NAME READY STATUS RESTARTS AGE calltelemetry-web-fqlv5 1/1 Running 0 4m21s calltelemetry-web-gp2f9 1/1 Running 0 4m21s calltelemetry-web-zbkk6 1/1 Running 0 4m21s svclb-traefik-4ngn8 2/2 Running 0 16m svclb-traefik-6pmjw 2/2 Running 0 16m svclb-traefik-chqsw 2/2 Running 0 16m traefik-99bfb8458-8xdvj 1/1 Running 0 16m Check your IPs assigned, you should see your IPs listed here kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE calltelemetry-primary LoadBalancer 10.43.195.226 192.168.123.135 80:30609/TCP,22:32207/TCP 13m calltelemetry-secondary LoadBalancer 10.43.122.52 192.168.123.136 80:32049/TCP,22:32124/TCP 13m kubernetes ClusterIP 10.43.0.1 <none> 443/TCP 2d18h traefik LoadBalancer 10.43.171.164 192.168.123.139 80:31050/TCP,443:30731/TCP 22h Setup DNS records to point to your 2 IP Addresses - primary and secondary. Open a web browser to http://primary-ip and create an account. Use these 2 records for the CURRI API, and the primary for the CDR desintation. Appendix / Troubleshooting If you need to find your SQL Password In our case, the password for postgres user is calltelemetry pgo show user -n pgo ctsql --show-system-accounts CLUSTER USERNAME PASSWORD EXPIRES STATUS ERROR ------- ----------- ------------------------ ------- ------ ----- ctsql crunchyadm never ok ctsql postgres calltelemetry never ok ctsql primaryuser random_pass never ok ctsql testuser random_pass never ok SQL - Crunchy Data PostgreSQL Operator Cruncy Data PostgreSQL Operator Github Crunch Data PostgreSQL Operator Docs Cruncy Data PostgreSQL Quickstart","title":"Kubernetes"},{"location":"deployment/k3s/#k3s-cluster-guide","text":"Although it is a long page, the entire deployment is only about 30 minutes.","title":"K3S Cluster Guide"},{"location":"deployment/k3s/#architecture","text":"","title":"Architecture"},{"location":"deployment/k3s/#ip-addressing","text":"","title":"IP Addressing"},{"location":"deployment/k3s/#deploy-3-or-more-calltelemetry-cluster-ovas","text":"Download CentOS 8.3 OVA File - 900MB The OVA includes a couple utilities - helm, kubectl, k9s, and saves you a little time \"building\" the OS. It's prebuilt from CentOS 8.3 with all updates applied. You can install this on ANY linux distro, but the support required to do so is beyond my time. I want to install CentOS myself - what's missing?","title":"Deploy 3 or more CallTelemetry Cluster OVAs"},{"location":"deployment/k3s/#enable-snaps","text":"yum install -y epel-release yum install -y snapd yum install -y wget systemctl enable --now snapd.socket ln -s /var/lib/snapd/snap /snap snap wait system seed.loaded systemctl restart snapd.seeded.service","title":"enable snaps"},{"location":"deployment/k3s/#install-kubectl-and-helm","text":"snap install kubectl --classic snap install helm --classic The nodes boot up and display their DHCP Address on login screen. SSH to the nodes on port 22. Default password is calltelemetry/calltelemetry It's OK to Change the password - it's not used anywhere else. Change hostnames! If you do not set the hostname per node, you will not get very far without things failing. I recommend ct-node-1, ct-node-2, ct-node-3, etc, but this is your choice. sudo hostnamect ct-node-1 Repeat for other nodes 2 and 3.","title":"install kubectl and helm"},{"location":"deployment/k3s/#static-ip-the-nics-is-recommended","text":"in CentOS you can static the NICs like this sudo nmtui","title":"Static IP the NICs is recommended."},{"location":"deployment/k3s/#install-first-k3s-master-node","text":"Time: about 2 minutes Copy and paste this via SSH on the first node. export INSTALL_K3S_CHANNEL=stable export K3S_KUBECONFIG_MODE=\"0644\" export K3S_TOKEN=\"calltelemetry\" curl -sfL https://get.k3s.io | sh -s server --cluster-init --no-deploy traefik --disable servicelb rm -rf .kube mkdir .kube sudo cat /etc/rancher/k3s/k3s.yaml > ~/.kube/config","title":"Install First K3s Master Node"},{"location":"deployment/k3s/#install-k3s-masters-2-and-3","text":"Time: about 5 minutes Change the K3S_URL IP address to Master node 1's IP Address export K3S_URL=\"https://192.168.123.167:6443\" export INSTALL_K3S_CHANNEL=stable export K3S_TOKEN=\"calltelemetry\" export K3S_KUBECONFIG_MODE=\"0644\" curl -sfL https://get.k3s.io | sh -s server - --no-deploy traefik --disable servicelb rm -rf .kube mkdir .kube sudo cat /etc/rancher/k3s/k3s.yaml > ~/.kube/config sudo cat /var/lib/rancher/k3s/server/node-token Check the health of the nodes before continuing - all should say running. calltelemetry@hp-k3s-1:~$ kubectl get nodes NAME STATUS ROLES AGE VERSION ct-node-1 Ready control-plane,etcd,master 4m36s v1.20.0+k3s2 ct-node-2 Ready control-plane,etcd,master 40s v1.20.0+k3s2 ct-node-3 Ready control-plane,etcd,master 19s v1.20.0+k3s2 calltelemetry@hp-k3s-1:~$","title":"Install K3s Masters 2 and 3"},{"location":"deployment/k3s/#install-metallb-scale-dns-pods-and-traefik-proxy","text":"Time: about 5 minutes Copy and Paste this block kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=\"$(openssl rand -base64 128)\" kubectl scale deployment.v1.apps/coredns --replicas=3 -n kube-system helm repo add traefik https://helm.traefik.io/traefik helm repo update helm install traefik traefik/traefik --set service.annotations.\"metallb\\.universe\\.tf\\/address-pool\"=default kubectl create namespace pgo kubectl apply -f https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.5.1/installers/kubectl/postgres-operator.yml curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.5.1/installers/kubectl/client-setup.sh > client-setup.sh chmod +x client-setup.sh cat <<EOF >> ~/.bashrc export PGOUSER=\"${HOME?}/.pgo/pgo/pgouser\" export PGO_CA_CERT=\"${HOME?}/.pgo/pgo/client.crt\" export PGO_CLIENT_CERT=\"${HOME?}/.pgo/pgo/client.crt\" export PGO_CLIENT_KEY=\"${HOME?}/.pgo/pgo/client.key\" export PGO_APISERVER_URL='https://127.0.0.1:8443' export PGO_NAMESPACE=pgo EOF source ~/.bashrc In about 3-5 minutes, all pods in the cluster should be \"Running\" [calltelemetry@ct-node-1 ~]$ kubectl get pod -A NAMESPACE NAME READY STATUS RESTARTS AGE default traefik-99bfb8458-9wjnc 1/1 Running 0 2m37s kube-system coredns-854c77959c-6nf88 1/1 Running 0 2m59s kube-system coredns-854c77959c-cg9vg 1/1 Running 0 8m10s kube-system coredns-854c77959c-g9jbr 1/1 Running 0 2m59s kube-system local-path-provisioner-7c458769fb-hpk77 1/1 Running 0 8m10s kube-system metrics-server-86cbb8457f-lfswr 1/1 Running 0 8m10s metallb-system controller-65db86ddc6-fmnvv 1/1 Running 0 2m59s metallb-system speaker-j4xj5 1/1 Running 0 2m59s metallb-system speaker-k84ln 1/1 Running 0 2m59s metallb-system speaker-lrmj9 1/1 Running 0 2m59s pgo pgo-deploy-clz5l 0/1 Completed 0 2m36s pgo postgres-operator-7b94775688-dv6nm 4/4 Running 1 83s [calltelemetry@ct-node-1 ~]$ Wait for postgres-operator to be running before continue","title":"Install MetalLB, Scale DNS Pods, and Traefik Proxy"},{"location":"deployment/k3s/#deploy-sql-ha-with-2-replicas","text":"Time: About 5 minutes","title":"Deploy SQL HA with 2 Replicas"},{"location":"deployment/k3s/#run-sql-the-setup-script","text":"(Run this on Node 1) Leave this window open after running the port-forward. You will have 2 windows open to Node 1. ./client-setup.sh sudo mv .pgo/pgo/pgo /usr/local/bin kubectl port-forward -n pgo svc/postgres-operator 8443:8443","title":"Run SQL the Setup Script"},{"location":"deployment/k3s/#open-a-ssh-window-to-the-same-node-in-a-new-window","text":"You can change the SQL password here if you like. pgo create cluster -n pgo ctsql -d calltelemetry_prod --replica-count 2 --password-superuser=calltelemetry Check the status of the deployment by watching the pods deploy. kubectl get pods -n pgo NAME READY STATUS RESTARTS AGE ctsql-6895cd4bb-2f524 0/1 ContainerCreating 0 21s ctsql-backrest-shared-repo-7d4648f796-wxrqh 1/1 Running 0 32s pgo-deploy-fpcq2 0/1 Completed 0 3m27s postgres-operator-7b94775688-2sf4c 4/4 Running 1 2m14s You should see 3 ctsql instances complete. Let's confirm they are online kubectl get pods -n pgo NAME READY STATUS RESTARTS AGE backrest-backup-ctsql-gnbvl 0/1 Completed 0 57s ctsql-6895cd4bb-2f524 1/1 Running 0 118s ctsql-backrest-shared-repo-7d4648f796-wxrqh 1/1 Running 0 2m9s ctsql-iulc-75ccc767c7-wwd2k 0/1 Running 0 49s ctsql-stanza-create-tkltr 0/1 Completed 0 66s ctsql-yzgz-8689bb9998-c2mlf 0/1 Running 0 49s pgo-deploy-fpcq2 0/1 Completed 0 5m4s postgres-operator-7b94775688-2sf4c 4/4 Running 1 3m51s # Check your Cluster pgo test ctsql cluster : ctsql Services primary (10.43.222.74:5432): UP replica (10.43.246.172:5432): UP Instances primary (ctsql-6895cd4bb-2f524): UP replica (ctsql-iulc-75ccc767c7-wwd2k): UP replica (ctsql-yzgz-8689bb9998-c2mlf): UP","title":"Open a SSH window to the same node in a NEW window"},{"location":"deployment/k3s/#deploy-calltelemetry","text":"Time: About 2 minutes Copy and paste this into a text editor, edit it with your password if you changed it, and assign 2 static IPS for primary and secondary. Cluster IP start and end are not use for CallTelemetry, but helpful to be set. This step creates a ct_values.yaml file in the local folder. Edit it on the server or in notepad. Paste this directly into the shell. cat <<EOF > ct_values.yaml # ct_values.yaml db_password: calltelemetry primary_ip: 192.168.123.135 secondary_ip: 192.168.123.136 cluster_ip_start: 192.168.123.138 cluster_ip_end: 192.168.123.140 EOF helm repo add ct_charts https://storage.googleapis.com/ct_charts/ helm repo update helm install calltelemetry ct_charts/calltelemetry -f ct_values.yaml If you need to re-deploy new values, it is an upgrade instead - like this helm upgrade calltelemetry -f ct_values.yaml Check the deployment - you should see 3 CallTelemetry-web servers running. kubectl get pods NAME READY STATUS RESTARTS AGE calltelemetry-web-fqlv5 1/1 Running 0 4m21s calltelemetry-web-gp2f9 1/1 Running 0 4m21s calltelemetry-web-zbkk6 1/1 Running 0 4m21s svclb-traefik-4ngn8 2/2 Running 0 16m svclb-traefik-6pmjw 2/2 Running 0 16m svclb-traefik-chqsw 2/2 Running 0 16m traefik-99bfb8458-8xdvj 1/1 Running 0 16m Check your IPs assigned, you should see your IPs listed here kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE calltelemetry-primary LoadBalancer 10.43.195.226 192.168.123.135 80:30609/TCP,22:32207/TCP 13m calltelemetry-secondary LoadBalancer 10.43.122.52 192.168.123.136 80:32049/TCP,22:32124/TCP 13m kubernetes ClusterIP 10.43.0.1 <none> 443/TCP 2d18h traefik LoadBalancer 10.43.171.164 192.168.123.139 80:31050/TCP,443:30731/TCP 22h Setup DNS records to point to your 2 IP Addresses - primary and secondary. Open a web browser to http://primary-ip and create an account. Use these 2 records for the CURRI API, and the primary for the CDR desintation.","title":"Deploy CallTelemetry"},{"location":"deployment/k3s/#appendix-troubleshooting","text":"","title":"Appendix / Troubleshooting"},{"location":"deployment/k3s/#if-you-need-to-find-your-sql-password","text":"In our case, the password for postgres user is calltelemetry pgo show user -n pgo ctsql --show-system-accounts CLUSTER USERNAME PASSWORD EXPIRES STATUS ERROR ------- ----------- ------------------------ ------- ------ ----- ctsql crunchyadm never ok ctsql postgres calltelemetry never ok ctsql primaryuser random_pass never ok ctsql testuser random_pass never ok","title":"If you need to find your SQL Password"},{"location":"deployment/k3s/#sql-crunchy-data-postgresql-operator","text":"Cruncy Data PostgreSQL Operator Github Crunch Data PostgreSQL Operator Docs Cruncy Data PostgreSQL Quickstart","title":"SQL - Crunchy Data PostgreSQL Operator"},{"location":"deployment/k8s/","text":"Kubernetes Charts You can be Production Ready - 5 minutes Just 5 minutes from Bare Ubuntu 18.0.4 VM to install a full Kubernetes Cluster + CallTelemetry and get to the login screen. Run the script Change your IP range sudo snap install microk8s --classic --channel = 1 .18/stable sudo microk8s.enable dns storage helm3 metallb:192.168.123.170-192.168.123.171 sudo microk8s.helm3 repo add calltelemetry https://calltelemetry.github.io/calltelemetry/ sudo microk8s.helm3 repo update sudo microk8s.kubectl create namespace calltelemetry sudo microk8s.helm3 install calltelemetry --namespace = calltelemetry calltelemetry/stable Check that everything is online demo@demo-VirtualBox:~$ sudo microk8s.kubectl get pod -n calltelemetry NAME READY STATUS RESTARTS AGE calltelemetry-7dbcc5784f-vz5vv 1/1 Running 0 12m","title":"K8s"},{"location":"deployment/k8s/#kubernetes-charts","text":"You can be Production Ready - 5 minutes Just 5 minutes from Bare Ubuntu 18.0.4 VM to install a full Kubernetes Cluster + CallTelemetry and get to the login screen.","title":"Kubernetes Charts"},{"location":"deployment/k8s/#run-the-script","text":"Change your IP range sudo snap install microk8s --classic --channel = 1 .18/stable sudo microk8s.enable dns storage helm3 metallb:192.168.123.170-192.168.123.171 sudo microk8s.helm3 repo add calltelemetry https://calltelemetry.github.io/calltelemetry/ sudo microk8s.helm3 repo update sudo microk8s.kubectl create namespace calltelemetry sudo microk8s.helm3 install calltelemetry --namespace = calltelemetry calltelemetry/stable","title":"Run the script"},{"location":"deployment/k8s/#check-that-everything-is-online","text":"demo@demo-VirtualBox:~$ sudo microk8s.kubectl get pod -n calltelemetry NAME READY STATUS RESTARTS AGE calltelemetry-7dbcc5784f-vz5vv 1/1 Running 0 12m","title":"Check that everything is online"},{"location":"deployment/load-testing/","text":"You can easily load test your own installation. Get the curri test request file wget https://raw.githubusercontent.com/calltelemetry/calltelemetry/docs/tests/curri.xml Install Ali Testing per your OS here Now get your CallTelemetry policy URL from the Web Portal, replace it here, and change --rps to increase the numer of requests per second. Hit Enter to run the test. ali -w=1 -r 100 -d=0 http://192.168.123.135/curri/policy\\?api_key\\=089131c3-6de2-4cc2-ae97-cd20975cd09e --method=POST --body-file curri.xml","title":"Load testing"},{"location":"deployment/load-testing/#you-can-easily-load-test-your-own-installation","text":"Get the curri test request file wget https://raw.githubusercontent.com/calltelemetry/calltelemetry/docs/tests/curri.xml Install Ali Testing per your OS here Now get your CallTelemetry policy URL from the Web Portal, replace it here, and change --rps to increase the numer of requests per second. Hit Enter to run the test. ali -w=1 -r 100 -d=0 http://192.168.123.135/curri/policy\\?api_key\\=089131c3-6de2-4cc2-ae97-cd20975cd09e --method=POST --body-file curri.xml","title":"You can easily load test your own installation."},{"location":"deployment/ova/","text":"Download the OVA and import to Vmware. You are running the entire CallTelemetry platform on-premise. As built below in the deafult template, it should service around 100/calls/second. Requirements: 2 vCPU 4GB RAM 60GB Disk Space Download Latest OVA Appliance (1.12Gb) OS Details CentOS 8.3 IP: DHCP Username: calltelemetry Password: calltelemetry First Login It will bootup and grab a DHCP address, and print that on the console. Just open a web browser to http://IPADDRESS and create a new login(signup). Each user is assigned their own private Organizaiton by default. No data is shared between users unless the user is invited to the Organization. Visit the Organization Page to learn more. Static IP Changing the IP is standard CentOS 8.0 processes. I've used the \"nmtui\" CLI utility in my lab testing to assign static IPs. Change the OS Password Good practice, change the password, it's one command. passwd","title":"OVA Appliance"},{"location":"deployment/ova/#first-login","text":"It will bootup and grab a DHCP address, and print that on the console. Just open a web browser to http://IPADDRESS and create a new login(signup). Each user is assigned their own private Organizaiton by default. No data is shared between users unless the user is invited to the Organization. Visit the Organization Page to learn more.","title":"First Login"},{"location":"deployment/ova/#static-ip","text":"Changing the IP is standard CentOS 8.0 processes. I've used the \"nmtui\" CLI utility in my lab testing to assign static IPs.","title":"Static IP"},{"location":"deployment/ova/#change-the-os-password","text":"Good practice, change the password, it's one command. passwd","title":"Change the OS Password"},{"location":"deployment/sizing/","text":"Sizing Guide CallTelemetry VMs are sized by cpu and call volume. After much testing, 100 calls per CPU thread per second is a good guide for sizing. This varies based on the hardware you provide. The OVA as released, with 2 vCPU, should handle 200 calls/second in under 20ms 95th precentile on most any machine. If you double vCPUs, performance doubles. If you are only inspecting a translation pattern inbound and oubound, then 500-700 new call requests sustained per second is sufficient for most all customers. Concurrent calls do not matter, only new events. Stress testing on 0.4.1: 2019 Macbook Pro - Vmware Fusion, 0.4.1 OVA. 2 vCPU Threads - 200/calls/second - 21ms. 4 vCPU threads - 400/calls/second - 21ms. 6 vCPU threads - 550/calls/second - 21ms. 8 vCPU Threads - 600/calls/second - 21ms. 10+ vCPU Threads - 700/calls/second. Virtualization operations slow down the maxium potential. Natively I can reach 1300/calls/second on the same system. Further optimization is being explored - the system can handle more in bursts, but this stress testing is purely a constant load test. Average 100/calls/second per vCPU using OVA model. Max 700/calls/second HP EliteDesk G2 Mini running ESXi 6.7 i5-6500T 4 core, 32GB DDR3, nvme drive. Vmware ESXi 6.7SU1 3 VMs in a Kubernetes Cluster - Each VM ran on 1 core. Peak Load - 300/calls/second, 61ms 95th percentile. 3 Cores allocated to Call Processing. 100/calls/second per vCPU even in Kuberentes model, on a modest consumer desktop. Max 300/calls/second in this setup. I have more machines on order to test more nodes in the cluster. The above testing was on consumer grade hardware, enterprise grade hardware should perform even better. I will be gathering more information on server hardware in the future. If you need failover or scaling beyond cores in a single node, choose Kubernetes","title":"Sizing"},{"location":"deployment/sizing/#sizing-guide","text":"CallTelemetry VMs are sized by cpu and call volume. After much testing, 100 calls per CPU thread per second is a good guide for sizing. This varies based on the hardware you provide. The OVA as released, with 2 vCPU, should handle 200 calls/second in under 20ms 95th precentile on most any machine. If you double vCPUs, performance doubles. If you are only inspecting a translation pattern inbound and oubound, then 500-700 new call requests sustained per second is sufficient for most all customers. Concurrent calls do not matter, only new events. Stress testing on 0.4.1:","title":"Sizing Guide"},{"location":"deployment/sizing/#2019-macbook-pro-vmware-fusion-041-ova","text":"2 vCPU Threads - 200/calls/second - 21ms. 4 vCPU threads - 400/calls/second - 21ms. 6 vCPU threads - 550/calls/second - 21ms. 8 vCPU Threads - 600/calls/second - 21ms. 10+ vCPU Threads - 700/calls/second. Virtualization operations slow down the maxium potential. Natively I can reach 1300/calls/second on the same system. Further optimization is being explored - the system can handle more in bursts, but this stress testing is purely a constant load test. Average 100/calls/second per vCPU using OVA model. Max 700/calls/second","title":"2019 Macbook Pro - Vmware Fusion, 0.4.1 OVA."},{"location":"deployment/sizing/#hp-elitedesk-g2-mini-running-esxi-67","text":"i5-6500T 4 core, 32GB DDR3, nvme drive. Vmware ESXi 6.7SU1 3 VMs in a Kubernetes Cluster - Each VM ran on 1 core. Peak Load - 300/calls/second, 61ms 95th percentile. 3 Cores allocated to Call Processing. 100/calls/second per vCPU even in Kuberentes model, on a modest consumer desktop. Max 300/calls/second in this setup. I have more machines on order to test more nodes in the cluster. The above testing was on consumer grade hardware, enterprise grade hardware should perform even better. I will be gathering more information on server hardware in the future. If you need failover or scaling beyond cores in a single node, choose Kubernetes","title":"HP EliteDesk G2 Mini running ESXi 6.7"},{"location":"features/apps/","text":"Apps Latest App Catalog Apps are a modular services that can trigger on any rule event. What can apps do? Alerts You can receive \"alert\" via Webex Teams, Email, Twilio, and more. Modifying call flow No apps do this today, but in the future, some apps will perform native actions - like blocking or redirecting a call. For example, to authenticate the caller, the service might redirect the call to an IVR to enter a code, then on the second time hitting the App let the caller through the system.","title":"Whare are Apps?"},{"location":"features/apps/#apps","text":"Latest App Catalog Apps are a modular services that can trigger on any rule event.","title":"Apps"},{"location":"features/apps/#what-can-apps-do","text":"","title":"What can apps do?"},{"location":"features/apps/#alerts","text":"You can receive \"alert\" via Webex Teams, Email, Twilio, and more.","title":"Alerts"},{"location":"features/apps/#modifying-call-flow","text":"No apps do this today, but in the future, some apps will perform native actions - like blocking or redirecting a call. For example, to authenticate the caller, the service might redirect the call to an IVR to enter a code, then on the second time hitting the App let the caller through the system.","title":"Modifying call flow"},{"location":"features/mcid/","text":"MCID Blocking Background MCID - Malicious Caller ID Tag - was released in Callmanager 4.0.1, in 2004. It's a softkey on the phone built into Callmanager. When the user is on a call, they can press \"MCID\", this will flag the call in CDR records. CallTelemetry Server will process CDR and look for the flag, and add it to the Call Policy API. Scope of MCID Blocking MCIDs are enforced globaly for the Organization. Additionally, each policy has an option to allow blocking of MCID protection or not. Users can only block their own lines. MCID submissions only apply to the phone that submitted them. User Submissions are Calling + Called number, and applied for that exact combination. This means - your users cannot submit wide impacting rules - only the rules that apply to their phone. Expirations MCIDs do not expire by default, but can be set under Organization Settings. Admin MCID blocks never expire. You can set the expiration of MCIDs to allow for them to be purged over time. Deleting MCIDs MCIDs are listed under MCID Submissions, and you can delete any entry, and see it's expiration schedule if set. 0 days means never expire.","title":"MCID Blocking"},{"location":"features/mcid/#mcid-blocking","text":"","title":"MCID Blocking"},{"location":"features/mcid/#background","text":"MCID - Malicious Caller ID Tag - was released in Callmanager 4.0.1, in 2004. It's a softkey on the phone built into Callmanager. When the user is on a call, they can press \"MCID\", this will flag the call in CDR records. CallTelemetry Server will process CDR and look for the flag, and add it to the Call Policy API.","title":"Background"},{"location":"features/mcid/#scope-of-mcid-blocking","text":"MCIDs are enforced globaly for the Organization. Additionally, each policy has an option to allow blocking of MCID protection or not. Users can only block their own lines. MCID submissions only apply to the phone that submitted them. User Submissions are Calling + Called number, and applied for that exact combination. This means - your users cannot submit wide impacting rules - only the rules that apply to their phone.","title":"Scope of MCID Blocking"},{"location":"features/mcid/#expirations","text":"MCIDs do not expire by default, but can be set under Organization Settings. Admin MCID blocks never expire. You can set the expiration of MCIDs to allow for them to be purged over time.","title":"Expirations"},{"location":"features/mcid/#deleting-mcids","text":"MCIDs are listed under MCID Submissions, and you can delete any entry, and see it's expiration schedule if set. 0 days means never expire.","title":"Deleting MCIDs"},{"location":"features/organizations/","text":"Organizations / Teams Each user on creation is assigned their own unique Organizaton. Add Users This page creates an new admin user with a password. You can add team members to your Organization via the Organization -> Add Admins page. Delete Users This will delete the user's account. Remove members by clicking the X on the user. Permissions Users are created on this page with \"Admin\" rights to your organization. Today the server allows \"anyone\" to sign up. If a user joins the server web page, they will not gain any access to Organization policies or reports. I will add user roles in a later version.","title":"Organizations"},{"location":"features/organizations/#organizations-teams","text":"Each user on creation is assigned their own unique Organizaton.","title":"Organizations / Teams"},{"location":"features/organizations/#add-users","text":"This page creates an new admin user with a password. You can add team members to your Organization via the Organization -> Add Admins page.","title":"Add Users"},{"location":"features/organizations/#delete-users","text":"This will delete the user's account. Remove members by clicking the X on the user.","title":"Delete Users"},{"location":"features/organizations/#permissions","text":"Users are created on this page with \"Admin\" rights to your organization. Today the server allows \"anyone\" to sign up. If a user joins the server web page, they will not gain any access to Organization policies or reports. I will add user roles in a later version.","title":"Permissions"},{"location":"features/policy/","text":"Rules: Triggers Block or Permit Starting in 0.4.1, matches support Regex, in addition to simple text. Rules are in RegEx Format: 911 (matches only 911) .* (match all) ^\\d{4}$/ (matches 4 digit calls) ^[1-9]\\d{9}$ ( Match 10 digit calls, starting with 1-9) You can block or permit the call. If you block, the Caller will hear a fast busy tone, as the call is rejected. Greetings Greeting Name and Identifier must match exactly! You can inject a callmanager greeting to any call. Upload audio to Callmanager as an Announcement, and match the exact name to the field in the CallTelemetry Rule. Modifiers You can dynamically change 4 things about the call - the calling and called number, and the calling and called name. Webhooks You can associate WebHooks to a rule to trigger real-time call data to POST to those API servers. You can customize the template sent in the WebHook setup, but not within the rule. Pressing + will associate the WebHook to the rule, and Pressing - will remove it from the rule. Apps You can associate Apps to rules to trigger services to react on real-time call data. Pressing '+' will associate the App to the rule. Pressing '-' will remove it from the rule. You must create Apps before they will show up on this page.","title":"Policies"},{"location":"features/policy/#rules","text":"Triggers","title":"Rules:"},{"location":"features/policy/#block-or-permit","text":"Starting in 0.4.1, matches support Regex, in addition to simple text. Rules are in RegEx Format: 911 (matches only 911) .* (match all) ^\\d{4}$/ (matches 4 digit calls) ^[1-9]\\d{9}$ ( Match 10 digit calls, starting with 1-9) You can block or permit the call. If you block, the Caller will hear a fast busy tone, as the call is rejected. Greetings Greeting Name and Identifier must match exactly! You can inject a callmanager greeting to any call. Upload audio to Callmanager as an Announcement, and match the exact name to the field in the CallTelemetry Rule. Modifiers You can dynamically change 4 things about the call - the calling and called number, and the calling and called name. Webhooks You can associate WebHooks to a rule to trigger real-time call data to POST to those API servers. You can customize the template sent in the WebHook setup, but not within the rule. Pressing + will associate the WebHook to the rule, and Pressing - will remove it from the rule. Apps You can associate Apps to rules to trigger services to react on real-time call data. Pressing '+' will associate the App to the rule. Pressing '-' will remove it from the rule. You must create Apps before they will show up on this page.","title":"Block or Permit"},{"location":"features/webhooks/","text":"App - Webhooks Webhooks allow you to take realtime call data, and pass it to any API. You can add multiple headers as needed. The payload is tested with JSON endpoints. Create a WebHook App WebHooks can be associated to any Rule within a Policy. You can use variable names like {{event.calling_name}} and others listed on the page to enrich your API request. Associate to Rule Then from a rule you would associate it as an action","title":"App - Webhooks"},{"location":"features/webhooks/#app-webhooks","text":"Webhooks allow you to take realtime call data, and pass it to any API. You can add multiple headers as needed. The payload is tested with JSON endpoints.","title":"App - Webhooks"},{"location":"features/webhooks/#create-a-webhook-app","text":"WebHooks can be associated to any Rule within a Policy. You can use variable names like {{event.calling_name}} and others listed on the page to enrich your API request.","title":"Create a WebHook App"},{"location":"features/webhooks/#associate-to-rule","text":"Then from a rule you would associate it as an action","title":"Associate to Rule"},{"location":"setup/cdr/","text":"CDR Server CallTelemetry runs a SFTP Server that accepts Cisco CDR formatted files, processes them, and decodes every field. CDR Events do NOT trigger rule matches (yet). 1. Obtain your CDR Credentials 2. Enable CDR Processing Within Callmanager Serviceability - CDR Management, add server.","title":"CDR"},{"location":"setup/cdr/#cdr-server","text":"CallTelemetry runs a SFTP Server that accepts Cisco CDR formatted files, processes them, and decodes every field. CDR Events do NOT trigger rule matches (yet).","title":"CDR Server"},{"location":"setup/cdr/#1-obtain-your-cdr-credentials","text":"","title":"1. Obtain your CDR Credentials"},{"location":"setup/cdr/#2-enable-cdr-processing","text":"","title":"2. Enable CDR Processing"},{"location":"setup/cdr/#within-callmanager-serviceability-cdr-management-add-server","text":"","title":"Within Callmanager Serviceability - CDR Management, add server."},{"location":"setup/curri/","text":"Onborading Guide - External Call Control / CURRI 1. In Callmanager, Create an ECC Profile 2. Point ECC Profile to Calltelemetry Copy the URL from your Policies Page by clicking here. Docker will not expose the IP of the host, so in most cases you will get \"localhost\" as the hostname - replace that with the IP of the box. Make sure to include port 80 as shown. Fill in the ECC Settings Name: Policy Name Primary Web Service: http://calltelemetryhost:80/api/etc Enable Load Balancing: No Call Treatment on Failures: Allow 3. Verify it shows as registered in CallTelemetry Anytime you have an ECC Profile built in Callmanager, Callmanager will reach out and try to register to the policy server. If your policy is not Registered, your rules won't work either. 4. Assign to Phones or Patterns You can apply ECC profiles to a Phone, Translation or Route Pattern. You can use Bulk Tools like BAT for large applications. Example for a phone Example for a Pattern","title":"Call Control"},{"location":"setup/curri/#onborading-guide-external-call-control-curri","text":"","title":"Onborading Guide - External Call Control / CURRI"},{"location":"setup/curri/#1-in-callmanager-create-an-ecc-profile","text":"","title":"1. In Callmanager, Create an ECC Profile"},{"location":"setup/curri/#2-point-ecc-profile-to-calltelemetry","text":"Copy the URL from your Policies Page by clicking here. Docker will not expose the IP of the host, so in most cases you will get \"localhost\" as the hostname - replace that with the IP of the box.","title":"2. Point ECC Profile to Calltelemetry"},{"location":"setup/curri/#make-sure-to-include-port-80-as-shown","text":"Fill in the ECC Settings Name: Policy Name Primary Web Service: http://calltelemetryhost:80/api/etc Enable Load Balancing: No Call Treatment on Failures: Allow","title":"Make sure to include port 80 as shown."},{"location":"setup/curri/#3-verify-it-shows-as-registered-in-calltelemetry","text":"Anytime you have an ECC Profile built in Callmanager, Callmanager will reach out and try to register to the policy server. If your policy is not Registered, your rules won't work either.","title":"3. Verify it shows as registered in CallTelemetry"},{"location":"setup/curri/#4-assign-to-phones-or-patterns","text":"You can apply ECC profiles to a Phone, Translation or Route Pattern. You can use Bulk Tools like BAT for large applications.","title":"4. Assign to Phones or Patterns"},{"location":"setup/curri/#example-for-a-phone","text":"","title":"Example for a phone"},{"location":"setup/curri/#example-for-a-pattern","text":"","title":"Example for a Pattern"},{"location":"setup/mcid/","text":"MCID (Malicious Call Identification) MCID was released in Callmanager 4.0.1, in 2004. It's a softkey on the phone built into Callmanager. When the user is on a call, they can press \"MCID\", this will flag the call in CDR records. CallTelemetry Server will process CDR and look for the flag, and add it to the Call Policy API as a block rule. Read more about the MCID Feature from Cisco ** You must be sending CDR to CallTelemetry Server. Click here if you need that guide. Step 1. Enable the MCID Softkey Device -> Device Settings -> Softkey Features Copy the Default Softkey to a new template Go to Softkey Configuration Go to Connected State Add MCID Softkey Apply softkey to phones, or set as Default Step 2. Demonstration of the MCID Softkey MCID creates a rule with calling AND called number(the user submitting). A submission will never cause other user's calls to be blocked. Any user worldwide can now submit their own unique blocked call based on the calling and called event.","title":"MCID Spam Tags"},{"location":"setup/mcid/#mcid-malicious-call-identification","text":"MCID was released in Callmanager 4.0.1, in 2004. It's a softkey on the phone built into Callmanager. When the user is on a call, they can press \"MCID\", this will flag the call in CDR records. CallTelemetry Server will process CDR and look for the flag, and add it to the Call Policy API as a block rule. Read more about the MCID Feature from Cisco ** You must be sending CDR to CallTelemetry Server. Click here if you need that guide.","title":"MCID (Malicious Call Identification)"},{"location":"setup/mcid/#step-1-enable-the-mcid-softkey","text":"Device -> Device Settings -> Softkey Features Copy the Default Softkey to a new template Go to Softkey Configuration Go to Connected State Add MCID Softkey Apply softkey to phones, or set as Default","title":"Step 1. Enable the MCID Softkey"},{"location":"setup/mcid/#step-2-demonstration-of-the-mcid-softkey","text":"MCID creates a rule with calling AND called number(the user submitting). A submission will never cause other user's calls to be blocked. Any user worldwide can now submit their own unique blocked call based on the calling and called event.","title":"Step 2. Demonstration of the MCID Softkey"},{"location":"troubleshooting/cdr/","text":"Troubleshooting CDR Restart the Csico CDR Agent in Cisco CUCM Servicability - Tools -> Control Center Network Services. I've found in lab testing, that it often gets stuck on CDR Server changes. Check the logs. On Docker you can SSH to the box with centos/centos. cd calltelemetry docker-compose logs A successful CDR Upload will look like this. [info] SFTP: Authenticating User [info] SFTP: Authenticating User/Pass [info] SFTP: File uploaded by 7REI4Y //7REI4Y/cdr_StandAloneCluster_01_202012021653_823 [info] CDR: Found CDR Integration for CDR user 7REI4Y [info] CDR: Parsing CDR for user 7REI4Y [info] CDR: Parsing file. [info] CDR: Looking for MCID [info] CDR: Inserting call. Org Name: Your Org [info] CDR: Updating Last Seen [info] CDR Integration - Last Seen Changeset [info] CDR: Deleting file /7REI4Y/cdr_StandAloneCluster_01_202012021630_817 If you get logs otherwise, send them to me in Webex Teams Space.","title":"CDR"},{"location":"troubleshooting/cdr/#troubleshooting-cdr","text":"Restart the Csico CDR Agent in Cisco CUCM Servicability - Tools -> Control Center Network Services. I've found in lab testing, that it often gets stuck on CDR Server changes. Check the logs. On Docker you can SSH to the box with centos/centos. cd calltelemetry docker-compose logs A successful CDR Upload will look like this. [info] SFTP: Authenticating User [info] SFTP: Authenticating User/Pass [info] SFTP: File uploaded by 7REI4Y //7REI4Y/cdr_StandAloneCluster_01_202012021653_823 [info] CDR: Found CDR Integration for CDR user 7REI4Y [info] CDR: Parsing CDR for user 7REI4Y [info] CDR: Parsing file. [info] CDR: Looking for MCID [info] CDR: Inserting call. Org Name: Your Org [info] CDR: Updating Last Seen [info] CDR Integration - Last Seen Changeset [info] CDR: Deleting file /7REI4Y/cdr_StandAloneCluster_01_202012021630_817 If you get logs otherwise, send them to me in Webex Teams Space.","title":"Troubleshooting CDR"},{"location":"troubleshooting/curri/","text":"Troubleshooting CURRI / ECC / Policies Check the logs. On Docker you can SSH to the box with centos/centos. cd calltelemetry sudo docker-compose logs A successful CDR Upload will look like this. If you get logs otherwise, send them to me in Webex Teams Space.","title":"Troubleshooting CURRI / ECC / Policies"},{"location":"troubleshooting/curri/#troubleshooting-curri-ecc-policies","text":"Check the logs. On Docker you can SSH to the box with centos/centos. cd calltelemetry sudo docker-compose logs A successful CDR Upload will look like this. If you get logs otherwise, send them to me in Webex Teams Space.","title":"Troubleshooting CURRI / ECC / Policies"},{"location":"troubleshooting/logs/","text":"Checking Logs On the OVA Docker Appliance you can SSH to the box on port 2222. (Port 22 is SFTP/CDR) To view appliance Logs, run the following cd calltelemetry docker-compose logs","title":"Logs"},{"location":"troubleshooting/logs/#checking-logs","text":"On the OVA Docker Appliance you can SSH to the box on port 2222. (Port 22 is SFTP/CDR) To view appliance Logs, run the following cd calltelemetry docker-compose logs","title":"Checking Logs"}]}